#!/usr/bin/env python
###############################################################################
#
# Munin plugin to monitor Zend OPCache <http://php.net/manual/en/book.opcache.php>
#
# Installation:
#  1. Copy munin_opcache.php file onto server and verify you can hit it in a browser
#  2. Add to Munin config:
# 
# [opcache_stats_]
# env.url http://localhost:808/opcache/munin_opcache.php
###############################################################################
# Settigs required for autoconf
#%# family=auto
#%# capabilities=autoconf suggest

import json
import os
import sys
from subprocess import PIPE,Popen
import re

CACHEDIR = os.environ['MUNIN_PLUGSTATE']
CACHEFILE = 'opcache-stats'
WGET_PATH = '/usr/bin/wget'

def report():
  if os.environ['url'] == None:
    print "Not configured env.url"
    sys.exit(1)
  
  url = os.environ['url']
  proc = Popen(WGET_PATH+' -q -Yoff -O - "'+url+'"', stdout=PIPE, shell=True)
  raw_output = proc.communicate()[0]
  parsed_data = json.loads(raw_output)
  parsed_data['php_version_'] = re.sub("-|\.", "_", parsed_data['php_version'])
  
  print "multigraph opcache_"+parsed_data['php_version_']+"_memory"
  print "mem_used.value", parsed_data['memory_usage']['used_memory']
  print "mem_free.value", parsed_data['memory_usage']['free_memory']
  print "mem_wasted.value", parsed_data['memory_usage']['wasted_memory']
  
  print "\nmultigraph opcache_"+parsed_data['php_version_']+"_keys"
  print "keys_used.value", parsed_data['interned_strings_usage']['used_memory']
  print "keys_free.value", parsed_data['interned_strings_usage']['free_memory']
  
  print "\nmultigraph opcache_"+parsed_data['php_version_']+"_restarts"
  print "oom_restarts.value", parsed_data['opcache_statistics']['oom_restarts']
  print "hash_restarts.value", parsed_data['opcache_statistics']['hash_restarts']
  print "manual_restarts.value", parsed_data['opcache_statistics']['manual_restarts']
  
  print "\nmultigraph opcache_"+parsed_data['php_version_']+"_count"
  print "cached_scripts.value", parsed_data['opcache_statistics']['num_cached_scripts']
  print "cached_keys.value", parsed_data['opcache_statistics']['num_cached_keys']
  
  print "\nmultigraph opcache_"+parsed_data['php_version_']+"_hitrate"
  print "hitrate.value", parsed_data['opcache_statistics']['opcache_hit_rate']
  
  print "\nmultigraph opcache_"+parsed_data['php_version_']+"_hits"
  print "hits.value", parsed_data['opcache_statistics']['hits']
  
def config():
  if os.environ['url'] == None:
    print "Not configured env.url"
    sys.exit(1)
  
  url = os.environ['url']
  
  proc = Popen(WGET_PATH+' -q -Yoff -O - "'+url+'"', stdout=PIPE, shell=True)
  raw_output = proc.communicate()[0]
  parsed_data = json.loads(raw_output)
  parsed_data['php_version_'] = re.sub("-|\.", "_", parsed_data['php_version'])
    
  print "multigraph opcache_"+parsed_data['php_version_']+"_memory"
  print "graph_title OPcache ("+parsed_data['php_version']+") Memory usage"
  print """graph_args -l 0 --base 1024
graph_vlabel Memory usage
graph_category php
graph_order mem_used mem_wasted mem_free
graph_total Total
mem_used.label Used
mem_used.draw AREA
mem_used.min 0
mem_wasted.label Wasted 
mem_wasted.draw STACK
mem_wasted.min 0
mem_free.label Free
mem_free.draw STACK
mem_free.min 0
"""

  print "multigraph opcache_"+parsed_data['php_version_']+"_keys"
  print "graph_title OPcache ("+parsed_data['php_version']+") Keys usage"
  print """graph_args -l 0 --base 1024
graph_vlabel Keys usage
graph_category php
graph_order keys_used keys_free
graph_total Total
keys_used.label Used
keys_used.draw AREA
keys_used.min 0
keys_free.label Free
keys_free.draw STACK
keys_free.min 0
"""

  print "multigraph opcache_"+parsed_data['php_version_']+"_restarts"
  print "graph_title OPcache ("+parsed_data['php_version']+") Restarts"
  print """graph_args -l 0 --base 1024
graph_scale no
graph_vlabel OPCache Restarts
graph_category php
graph_order oom_restarts hash_restarts manual_restarts
oom_restarts.label Out Of Memory Restarts
oom_restarts.draw LINE1
oom_restarts.min 0
hash_restarts.label Hash overflow restarts
hash_restarts.draw LINE1
hash_restarts.min 0
manual_restarts.label Manual calls to opcache_reset()
manual_restarts.draw LINE1
manual_restarts.min 0
"""

  print "multigraph opcache_"+parsed_data['php_version_']+"_count"
  print "graph_title OPcache ("+parsed_data['php_version']+") Cached scripts/keys"
  print """graph_vlabel Cached
graph_category php
graph_order cached_scripts cached_keys
cached_scripts.label Scripts
cached_scripts.draw LINE2
cached_scripts.min 0
cached_keys.label Keys
cached_keys.draw LINE2
cached_keys.min 0
"""

  print "multigraph opcache_"+parsed_data['php_version_']+"_hitrate"
  print "graph_title OPcache ("+parsed_data['php_version']+") hitrate"
  print """graph_scale no
graph_vlabel Hitrate
graph_category php
graph_order hitrate
hitrate.label Hitrate
hitrate.draw LINE1
hitrate.min 0
"""

  print "multigraph opcache_"+parsed_data['php_version_']+"_hits"
  print "graph_title OPcache ("+parsed_data['php_version']+") hits"
  print """graph_scale no
graph_vlabel Hits per second
graph_category php
graph_order hits/sec
hits.label Hits
hits.type DERIVE
hits.draw LINE1
hits.min 0
"""

def main():
    if len(sys.argv)>1:
        command = sys.argv[1]
    else:
        command = ""
    if command=='config':
        config()
    elif command=='suggest':
        print 'memory'
    elif command=='autoconf':
        if os.environ['url'] == None:
            print "no (edit env.url config in header file !)"
            sys.exit(1)
        if os.environ['url'] != '':
            print "yes"
    else:
        report()

if __name__ == "__main__":
    main()
